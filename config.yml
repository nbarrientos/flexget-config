variables: secrets.yaml
templates:
  localtransmission:
    exists_series:
      - "{? paths.torrent_base ?}/downloads"
      - "{? paths.torrent_base ?}/incomplete"
    transmission:
      host: '{? transmission.host ?}'
      port: 9091
      username: '{? transmission.user ?}'
      password: '{? transmission.passwd ?}'
      addpaused: no
      path: "{? paths.torrent_base ?}/downloads"
  notifyseries:
    notify:
      entries:
        title: "A new episode of {{series_name}} is ready!"
        message: "{{series_id}} ({{quality}})"
        via:
          - pushbullet:
              api_key: '{? pb.apikey ?}'
  notifymovies:
    notify:
      entries:
        title: "A new movie is ready!"
        message: "{{imdb_name}}"
        via:
          - pushbullet:
              api_key: '{? pb.apikey ?}'
  refreshkodi:
    kodi_library:
      action: scan
      category: video
      url: '{? kodi.url ?}'
      port: 80
  from_trakt:
    configure_series:
      from:
        trakt_list:
          account: '{? trakt.account ?}'
          list: get
          type: shows
      settings:
        timeframe: 6 hours
        target: 1080p h264
        quality: 720p+ h264
        identified_by: ep
        upgrade: yes

tasks:
  rtt:
    no_entries_ok: yes
    rss: "https://revolutiontt.me/rss.php?feed=dl&bookmarks=on&passkey={? rtt.passkey ?}"
    accept_all: yes
    template: localtransmission

  # If a single episode is added to the trakt list then
  # set that one as begin for that series and add the whole
  # show.
  setbegin:
    seen: local
    trakt_list:
      account: '{? trakt.account ?}'
      list: get
      type: episodes
    accept_all: yes
    set_series_begin: yes
    list_remove:
      - trakt_list:
          account: '{? trakt.account ?}'
          list: get
          type: episodes
    list_add:
      - trakt_list:
          account: '{? trakt.account ?}'
          list: get
          type: shows
    priority: 20

  publicp2p:
    discover:
      what:
        - next_series_episodes:
            from_start: true
      release_estimations: loose
      from:
        - rarbg:
            category: 41
            sorted_by: seeders
        - search_rss:
            url: https://eztv.ag/ezrss.xml
    template:
      - from_trakt
      - localtransmission

  publicp2p_movies:
    discover:
      what:
        - trakt_list:
            account: '{? trakt.account ?}'
            list: get
            type: movies
      from:
        - rarbg:
            category: 44
            sorted_by: seeders
        - search_rss:
            url: "https://revolutiontt.me/rss.php?feed=dl&cat=12&passkey={? rtt.passkey ?}"
    quality: 1080p h264
    template:
      - localtransmission

  cleanup:
    no_entries_ok: yes
    accept_all: yes
    clean_transmission:
      host: '{? transmission.host ?}'
      port: 9091
      username: '{? transmission.user ?}'
      password: '{? transmission.passwd ?}'
      finished_for: 30 days
      min_ratio: '{? transmission.min_ratio ?}'
      delete_files: yes
      preserve_tracker: revolutiontt

  unpack:
    priority: 5
    filesystem:
      path: "{? paths.torrent_base ?}/downloads"
      recursive: true
      regexp: .*\.(rar)$
    accept_all: true
    seen: local
    regexp:
      reject:
        - sample
    exec: unrar e -r -o- "{{location}}" "{? paths.media_base ?}/unsorted"

  sortseries:
    priority: 10
    no_entries_ok: yes
    metainfo_series: yes
    accept_all: yes
    seen: local
    filesystem:
      path: "{? paths.torrent_base ?}/downloads"
      recursive: 2
      retrieve: files
      regexp: '.*\.(avi|mkv|mp4|m4v)$'
    regexp:
      reject:
        - sample
    require_field: series_name
    copy:
      to: "{? paths.media_base ?}/Shows/{{series_name}}/Season {{series_season}}/"
    template:
      - notifyseries
      - refreshkodi

  sortseries_extracted:
    priority: 10
    no_entries_ok: yes
    metainfo_series: yes
    accept_all: yes
    seen: local
    filesystem:
      path: "{? paths.media_base ?}/unsorted"
      recursive: false
      retrieve: files
      regexp: '.*\.(avi|mkv|mp4|m4v)$'
    regexp:
      reject:
        - sample
    require_field: series_name
    move:
      to: "{? paths.media_base ?}/Shows/{{series_name}}/Season {{series_season}}/"
    template:
      - notifyseries
      - refreshkodi

  sortmovies:
    priority: 15
    no_entries_ok: yes
    require_field: imdb_url
    seen: local
    imdb:
      accept_languages:
        - english
        - french
        - spanish
    filesystem:
      path: "{? paths.torrent_base ?}/downloads"
      recursive: 2
      retrieve: files
      regexp: '.*\.(avi|mkv|mp4|m4v)$'
    regexp:
      reject:
        - sample
    copy:
      to: "{? paths.media_base ?}/Movies"
    template:
      - notifymovies
      - refreshkodi

  sortmovies_extracted:
    priority: 15
    no_entries_ok: yes
    require_field: imdb_url
    seen: local
    imdb:
      accept_languages:
        - english
        - french
        - spanish
    filesystem:
      path: "{? paths.media_base ?}/unsorted"
      recursive: False
      retrieve: files
      regexp: '.*\.(avi|mkv|mp4|m4v)$'
    move:
      to: "{? paths.media_base ?}/Movies"
    template:
      - notifymovies
      - refreshkodi
